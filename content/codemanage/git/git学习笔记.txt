git学习笔记
---------------------------------
* 初始化git
  * git config --global user.name "liujun"
  * git config --global user.email "liujun@moqikaka.com"
* 创建本地版本库
  * cd 到指定目录
  * git init ##创建版本库
* 添加新文件到git版本库中，要求待添加的文件一定位于刚才指定的本地版本库目录
  * git add fliename
  * git commit -m "提交的注释说明"
* 查看当前版本库状态
  * git status
* 查看具体变更的代码信息
  * git diff filename
* 文件变更提交同3
  * git add filename
  * git commit -m "提交的注释说明"
* 查看日志信息
  * git log #查看所有文件的日志
  * git log filename #查看指定文件的日志
  * git log --grapth #以图形方式列出提交信息
  * git reflog #查看所有版本信息（包括之前做的git reset操作）
  * git reflog filename #查看指定文件的未来版本信息
* 查看未push的提交
  * git log master ^origin/master # master可以更改为其他分支名
  * git cherry -v只能查看未传送提交的描述/说明
* 回退到指定版本
  * git reset --hard #版本ID
  * git reset --hard HEAD #回退到上一个版本
  * git reset --hard HEAD^^ #回退到上上一个版本
* 丢弃工作区的修改
  * git checkout -- filename #撤销指定文件的修改
* 丢弃暂存区的修改
  * git reset HEAD filename #丢弃暂存区的修改，并重新放回工作区
* 删除文件
  * git rm filename #从版本库中删除指定文件
* 下载远程仓库
  * git clone git@github.com:michaelliao/gitskills.git
  * git clone username@host:/path/repository
* 添加到远程仓库
  * git remote add origin ssh://你的用户名@你的IP/~/testgit/.git
  * git remote #显示当前仓库和哪些远程仓库关联了
  * git remote -v #显示详细的管理的远程仓库信息
* 把本地的一个分支提交到远程分支上面
  * git push origin branchname
* 创建分支
  * git branch branchname #在本地创建分支
  * git checkout -b branchname origin/branchname #在远端创建分支
* 切换分支
  * git checkout branchname
  * git checkout -b branchname #创建并切换分支
* 查看分支
  * git branch 
* 下载代码
  * git pull
  * git fetch：相当于是从远程获取最新版本到本地，不会自动merge
* 删除分支
  * git branch -d branchname
  * git push origin :远端分支名 删除远端分支
* 合并分支
  * git merge branchname #分支合并到当前分支  
  * git merge 分支名 --squash # 合并而不提交，且不会保留分支日志
* 合并分支时保留分支日志
  * git merge --no-ff -m "日志" branchname
  * git merge Fast-forward
* 合并分支——git rebase
  * git rebase 目标分支名 把当前目标分支的所有调整应用到当前分支
  * git rebase --abort 取消分支合并
  * git rebase --skip 直接把目标分支的内容作为当前分支的内容
  * git rebase -i HEAD~4 合并最近4次提交
* 合并某个提交到指定分支 git cherry
  * git cherry-pick 提交Id 把其他分支的单个提交合并到当前分支  
* 分支替换
  * git push origin develop:master -f 把本地的 develop 分支强制(-f)推送到远程 master

	但是上面操作，本地的 master 分支还是旧的，通常来说应该在本地做好修改再去 push 到远端，所以我推荐如下操作

    git checkout master // 切换到旧的分支
	git reset --hard develop  // 将本地的旧分支 master 重置成 develop
	git push origin master --force // 再推送到远程仓库
* 使本地分支和远程分支建立链接
  * git branch --set-upstream branchname origin/branchname
* 取消暂存
  * git rm --cached dir/ -r #把名为dir的目录里面所有的文件取消暂存
  * git rm --cached filename #取消指定文件暂存
* 撤销暂存区的修改
  * git reset HEAD filename 撤销指定文件的暂存区的修改
* 临时备份管理
  * git stash #备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上一次提交的内容一致。同时将当前工作区的内容保存到栈中
  * git stash pop #从git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个stash的内容。所以使用栈来管理。pop会从最近的一个stash中读取内容并恢复
  * git stash list #显示git栈内的所有备份。可以使用这个列表来决定要恢复到哪个地方
  * git stash clear #清空git栈。此时使用gitg等图形化工作会发现，原来stash的那些节点都消失了
  * git stash apply stash@{1} #恢复到指定版本。但不会删除栈中对应的记录。
* 存储当前登录信息
  * git config --global user.name "用户名"
  * git config --global user.email "用户邮箱"
  * // 进行一次操作，并登陆一次
  * git config --global credential.helper store
* git代理设置
  * 设置
  git config --global http.proxy http://proxy.com:1234
  git config --global http.proxy http://127.0.0.1:1080
  git config --global https.proxy https://127.0.0.1:1080
  git config --global http.proxy 'socks5://127.0.0.1:1080' 
  git config --global https.proxy 'socks5://127.0.0.1:1080'  
  * 取消代理
  git config --global --unset http.proxy
  git config --global --unset https.proxy
* 清除所有非版本管理的文件
  * git clean -f 强制清理所有非管理的文件
* 显示某个文件每行的修改人
  * git blame 文件名 列出每行代码的最新修改人和时间
* 文件系统检测 git fsck
  * git fsck --lost-found 查找丢失的提交
  * git fsck 
* 一个分支完全替换另一个分支
  * git checkout master //切换到目标分支
  * git reset --hard develop // 强制将当前分支重置成develop
  * git push origin master --force // 推送到远程仓库
* 分支改名
  * git branch -m 老分支名 需要改成的名字 // 更改本地分支名
  * git push origin 新分支名 // 把本地分支推送到远程
  * git push --delete origin 老分支名  // 删除原来的远程分支